{
  "org_name": "CloudSmith-Release-Safety",
  "repo_name": "pet_clinic_insurance_service",
  "repo_url": "https://github.com/CloudSmith-Release-Safety/pet_clinic_insurance_service",
  "infrastructure_providers": [
    {
      "provider_id": "aws_secretsmanager",
      "resource_type": "SecretsManager",
      "resource_identifier": "petclinic-python-dbsecret",
      "file_path": "pet_clinic_insurance_service/pet_clinic_insurance_service/settings.py",
      "infrastructure_type": "SDK-Direct",
      "description": "AWS Secrets Manager used to store and retrieve database credentials",
      "interfaces": [
        {
          "interface_type": "api",
          "endpoint_pattern": "secretsmanager.${region}.amazonaws.com",
          "operations": ["GetSecretValue"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "region": "configured from REGION environment variable, defaults to us-east-1",
        "secret_name": "configured from SECRET_NAME environment variable, defaults to petclinic-python-dbsecret"
      },
      "security": {
        "access_control": "IAM-based"
      },
      "environment_variables": [
        "SECRET_NAME",
        "REGION"
      ],
      "provider_type": "external"
    },
    {
      "provider_id": "aws_ecr_repository",
      "resource_type": "ECR",
      "resource_identifier": "python-petclinic-billing-service",
      "file_path": "push-ecr.sh",
      "infrastructure_type": "SDK-Direct",
      "description": "ECR repository for storing the Docker images of the pet clinic insurance service",
      "interfaces": [
        {
          "interface_type": "api",
          "endpoint_pattern": "${account_id}.dkr.ecr.${region}.amazonaws.com/python-petclinic-billing-service",
          "operations": ["GetAuthorizationToken", "CreateRepository", "PushImage"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "repository_name": "python-petclinic-billing-service",
        "region": "configured from REGION environment variable"
      },
      "environment_variables": [
        "ACCOUNT",
        "REGION"
      ],
      "provider_type": "external"
    },
    {
      "provider_id": "aws_eks_cluster",
      "resource_type": "EKS",
      "resource_identifier": "petclinic-demo",
      "file_path": ".github/workflows/eks-deploy.yml",
      "infrastructure_type": "SDK-Direct",
      "description": "EKS cluster where the pet clinic insurance service is deployed",
      "interfaces": [
        {
          "interface_type": "api",
          "endpoint_pattern": "eks.${region}.amazonaws.com",
          "operations": ["DescribeCluster", "UpdateKubeconfig"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "cluster_name": "petclinic-demo",
        "region": "us-west-2"
      },
      "environment_variables": [
        "TF_VAR_cluster_name",
        "AWS_REGION"
      ],
      "provider_type": "external"
    },
    {
      "provider_id": "aws_rds_instance",
      "resource_type": "RDS",
      "resource_identifier": "petclinic-database.cufgmmyvvbb2.us-west-2.rds.amazonaws.com",
      "file_path": "scripts/eks/appsignals/tf-deploy-k8s-res.sh",
      "infrastructure_type": "SDK-Direct",
      "description": "RDS PostgreSQL instance used as the database for the pet clinic insurance service",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "petclinic-database.cufgmmyvvbb2.us-west-2.rds.amazonaws.com:5432",
          "operations": ["Connect", "Query", "Migrate"],
          "authentication": "Username/Password"
        }
      ],
      "configuration": {
        "host": "petclinic-database.cufgmmyvvbb2.us-west-2.rds.amazonaws.com",
        "port": "5432",
        "database_name": "postgres",
        "username": "djangouser"
      },
      "environment_variables": [
        "DB_NAME",
        "DB_USER",
        "DB_USER_PASSWORD",
        "DB_SERVICE_HOST",
        "DB_SERVICE_PORT"
      ],
      "provider_type": "external"
    },
    {
      "provider_id": "aws_iam_role",
      "resource_type": "IAM",
      "resource_identifier": "AWS_ROLE_TO_ASSUME",
      "file_path": ".github/workflows/eks-deploy.yml",
      "infrastructure_type": "SDK-Direct",
      "description": "IAM role used by GitHub Actions to deploy to AWS",
      "interfaces": [
        {
          "interface_type": "api",
          "endpoint_pattern": "iam.amazonaws.com",
          "operations": ["AssumeRole"],
          "authentication": "OIDC"
        }
      ],
      "configuration": {
        "role_name": "stored in GitHub secrets as AWS_ROLE_TO_ASSUME"
      },
      "provider_type": "external"
    }
  ],
  "application_consumers": [
    {
      "consumer_id": "django_application",
      "component_type": "application",
      "file_path": "pet_clinic_insurance_service/pet_clinic_insurance_service/settings.py",
      "language": "Python",
      "description": "Django application providing insurance service for pet clinic",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": [
          "SECRET_NAME",
          "REGION",
          "DB_NAME",
          "DB_USER",
          "DB_USER_PASSWORD",
          "DB_SERVICE_HOST",
          "DB_SERVICE_PORT",
          "DATABASE_PROFILE"
        ]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": ["EKS pod IAM role"]
      },
      "sdk_usage": {
        "sdk_type": "boto3",
        "clients": ["secretsmanager"]
      },
      "package_dependencies": [
        "boto3",
        "django",
        "psycopg2",
        "djangorestframework",
        "py_eureka_client",
        "requests"
      ],
      "internal_dependencies": [],
      "external_dependencies": [
        {
          "resource_type": "SecretsManager",
          "resource_name": "petclinic-python-dbsecret",
          "repository": "unknown"
        },
        {
          "resource_type": "RDS",
          "resource_name": "petclinic-database",
          "repository": "unknown"
        }
      ]
    },
    {
      "consumer_id": "github_actions_workflow",
      "component_type": "ci/cd",
      "file_path": ".github/workflows/eks-deploy.yml",
      "language": "YAML",
      "description": "GitHub Actions workflow for building and deploying the application to EKS",
      "resource_discovery": {
        "method": "environment variables and hardcoded values",
        "environment_variables": [
          "AWS_REGION",
          "TFSTATE_REGION",
          "TF_VAR_cluster_name"
        ]
      },
      "authentication": {
        "method": "OIDC with assumed role",
        "role_references": ["${{ secrets.AWS_ROLE_TO_ASSUME }}"]
      },
      "sdk_usage": {
        "sdk_type": "aws-cli",
        "clients": ["sts", "ecr", "eks"]
      },
      "package_dependencies": [],
      "internal_dependencies": [],
      "external_dependencies": [
        {
          "resource_type": "ECR",
          "resource_name": "python-petclinic-billing-service",
          "repository": "unknown"
        },
        {
          "resource_type": "EKS",
          "resource_name": "petclinic-demo",
          "repository": "unknown"
        },
        {
          "resource_type": "IAM",
          "resource_name": "AWS_ROLE_TO_ASSUME",
          "repository": "unknown"
        }
      ]
    },
    {
      "consumer_id": "ecr_push_script",
      "component_type": "script",
      "file_path": "push-ecr.sh",
      "language": "Bash",
      "description": "Bash script for pushing Docker images to ECR",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": [
          "ACCOUNT",
          "REGION",
          "COMMIT_SHA"
        ]
      },
      "authentication": {
        "method": "IAM credentials from AWS CLI",
        "role_references": []
      },
      "sdk_usage": {
        "sdk_type": "aws-cli",
        "clients": ["ecr"]
      },
      "package_dependencies": [],
      "internal_dependencies": [],
      "external_dependencies": [
        {
          "resource_type": "ECR",
          "resource_name": "python-petclinic-billing-service",
          "repository": "unknown"
        }
      ]
    },
    {
      "consumer_id": "eks_deployment_script",
      "component_type": "script",
      "file_path": "scripts/eks/appsignals/tf-deploy-k8s-res.sh",
      "language": "Bash",
      "description": "Bash script for deploying Kubernetes resources to EKS",
      "resource_discovery": {
        "method": "command line arguments and hardcoded values",
        "environment_variables": []
      },
      "authentication": {
        "method": "IAM credentials from AWS CLI",
        "role_references": []
      },
      "sdk_usage": {
        "sdk_type": "aws-cli",
        "clients": ["sts"]
      },
      "package_dependencies": [],
      "internal_dependencies": [],
      "external_dependencies": [
        {
          "resource_type": "EKS",
          "resource_name": "petclinic-demo",
          "repository": "unknown"
        },
        {
          "resource_type": "RDS",
          "resource_name": "petclinic-database",
          "repository": "unknown"
        }
      ]
    }
  ],
  "connections": [
    {
      "connection_id": "django_secretsmanager",
      "consumer_id": "django_application",
      "provider_id": "aws_secretsmanager",
      "provider_resource_type": "SecretsManager",
      "operation": "GetSecretValue",
      "access_type": "read",
      "description": "Django application retrieves database credentials from AWS Secrets Manager",
      "code_snippet": "client = boto3.client('secretsmanager', region_name=region_name)\nresponse = client.get_secret_value(SecretId=secret_name)\nreturn response['SecretString']",
      "source_file_path": "pet_clinic_insurance_service/pet_clinic_insurance_service/settings.py",
      "target_file_path": "N/A",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": true,
      "target_repo": "unknown"
    },
    {
      "connection_id": "django_rds",
      "consumer_id": "django_application",
      "provider_id": "aws_rds_instance",
      "provider_resource_type": "RDS",
      "operation": "Connect",
      "access_type": "read",
      "description": "Django application connects to RDS PostgreSQL database",
      "code_snippet": "\"postgresql\":{\n    \"ENGINE\": \"django.db.backends.postgresql\",\n    \"NAME\": os.environ.get('DB_NAME'),\n    \"USER\": os.environ.get('DB_USER'),\n    \"PASSWORD\": DB_PASSWORD,\n    \"HOST\": os.environ.get(\"DB_SERVICE_HOST\"),\n    \"PORT\": os.environ.get(\"DB_SERVICE_PORT\"),\n}",
      "source_file_path": "pet_clinic_insurance_service/pet_clinic_insurance_service/settings.py",
      "target_file_path": "N/A",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": true,
      "target_repo": "unknown"
    },
    {
      "connection_id": "github_actions_iam",
      "consumer_id": "github_actions_workflow",
      "provider_id": "aws_iam_role",
      "provider_resource_type": "IAM",
      "operation": "AssumeRole",
      "access_type": "admin",
      "description": "GitHub Actions assumes an IAM role to deploy to AWS",
      "code_snippet": "- name: Configure AWS credentials\n  uses: aws-actions/configure-aws-credentials@v2\n  with:\n    role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}\n    aws-region: ${{ env.AWS_REGION }}",
      "source_file_path": ".github/workflows/eks-deploy.yml",
      "target_file_path": "N/A",
      "configuration_source": "GitHub secrets",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": true,
      "target_repo": "unknown"
    },
    {
      "connection_id": "github_actions_ecr",
      "consumer_id": "github_actions_workflow",
      "provider_id": "aws_ecr_repository",
      "provider_resource_type": "ECR",
      "operation": "PushImage",
      "access_type": "write",
      "description": "GitHub Actions workflow pushes Docker images to ECR",
      "code_snippet": "- name: Push Docker images to ECR\n  run: |\n    export ACCOUNT=$(aws sts get-caller-identity | jq .Account -r)\n    export REGION=${{ env.AWS_REGION }}\n    export COMMIT_SHA=${{ github.sha }}\n    ./push-ecr.sh",
      "source_file_path": ".github/workflows/eks-deploy.yml",
      "target_file_path": "N/A",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": true,
      "target_repo": "unknown"
    },
    {
      "connection_id": "github_actions_eks",
      "consumer_id": "github_actions_workflow",
      "provider_id": "aws_eks_cluster",
      "provider_resource_type": "EKS",
      "operation": "UpdateKubeconfig",
      "access_type": "admin",
      "description": "GitHub Actions workflow configures kubectl to interact with EKS cluster",
      "code_snippet": "- name: Set up kubeconfig\n  run: aws eks update-kubeconfig --name ${{ env.TF_VAR_cluster_name }} --region ${{ env.AWS_REGION }} --alias ${{ env.TF_VAR_cluster_name }}",
      "source_file_path": ".github/workflows/eks-deploy.yml",
      "target_file_path": "N/A",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": true,
      "target_repo": "unknown"
    },
    {
      "connection_id": "ecr_push_script_ecr",
      "consumer_id": "ecr_push_script",
      "provider_id": "aws_ecr_repository",
      "provider_resource_type": "ECR",
      "operation": "CreateRepository",
      "access_type": "write",
      "description": "ECR push script creates repository if it doesn't exist",
      "code_snippet": "aws ecr create-repository --repository-name python-petclinic-billing-service --region ${REGION} --no-cli-pager || true",
      "source_file_path": "push-ecr.sh",
      "target_file_path": "N/A",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": true,
      "target_repo": "unknown"
    },
    {
      "connection_id": "eks_deployment_script_eks",
      "consumer_id": "eks_deployment_script",
      "provider_id": "aws_eks_cluster",
      "provider_resource_type": "EKS",
      "operation": "ApplyManifest",
      "access_type": "write",
      "description": "EKS deployment script applies Kubernetes manifests to the cluster",
      "code_snippet": "sed -e \"s/111122223333.dkr.ecr.us-west-2/$ACCOUNT_ID.dkr.ecr.$REGION/g\" -e 's#\\${REGION}'\"#${REGION}#g\" -e 's#\\${DB_SERVICE_HOST}'\"#${host}#g\" $config | kubectl -v=2 ${OPERATION} --namespace=$NAMESPACE -f -",
      "source_file_path": "scripts/eks/appsignals/tf-deploy-k8s-res.sh",
      "target_file_path": "N/A",
      "configuration_source": "command line arguments",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": true,
      "target_repo": "unknown"
    }
  ],
  "architecture": {
    "application_type": "microservice",
    "infrastructure_pattern": "container-based",
    "deployment_approach": "CI/CD with GitHub Actions and kubectl",
    "configuration_management": "environment variables and AWS Secrets Manager",
    "critical_paths": [
      {
        "path_name": "database_credentials_retrieval",
        "description": "Application retrieves database credentials from AWS Secrets Manager to connect to RDS",
        "involved_components": ["django_application", "aws_secretsmanager", "aws_rds_instance"]
      },
      {
        "path_name": "deployment_pipeline",
        "description": "GitHub Actions builds and deploys the application to EKS via ECR",
        "involved_components": ["github_actions_workflow", "aws_ecr_repository", "aws_eks_cluster"]
      }
    ],
    "security_model": {
      "authentication": "IAM roles for service accounts and GitHub OIDC",
      "authorization": "Role-based access control",
      "data_protection": "Secrets management with AWS Secrets Manager"
    },
    "cross_repo_dependencies": {
      "provides_to": [],
      "consumes_from": [
        {
          "repository": "unknown",
          "resources": ["aws_secretsmanager", "aws_ecr_repository", "aws_eks_cluster", "aws_rds_instance", "aws_iam_role"]
        }
      ],
      "shared_infrastructure": true
    }
  }
}